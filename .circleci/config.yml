# This code is licensed from CircleCI to the user under the MIT license. See
# https://circleci.com/orbs/registry/licensing for details.
version: 2.1
description: Common CI tasks for building and testing Rust crates.

executors:
  default:
    description: Executor environment for building Rust crates.
    docker:
      - image: rust:1

commands:
  checkout_with_submodules:
    description: Check out source code and submodules.
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: |
            git submodule sync
            git submodule update --init

  update_toolchain:
    description: Update the Rust toolchain to use for building.
    parameters:
      toolchain:
        description: Rust toolchain to use. Overrides the default toolchain (stable) or any toolchain specified in the project via `rust-toolchain`.
        type: string
        default: ""
    steps:
      - run:
          name: Install other dependencies
          command: |
            apt-get update -qq
            apt-get install -y -qq libsdl2-dev
      - run:
          name: Update toolchain
          command: |
            test -z "<<parameters.toolchain>>" || echo "<<parameters.toolchain>>" >rust-toolchain
            rustup show active-toolchain
      - run:
          name: Version information
          command: |
            rustup --version
            rustc --version
            cargo --version

  check:
    description: Run compiler checks on all targets of a Rust crate.
    steps:
      - run:
          name: Calculate dependencies
          command: test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Run compiler checks
          command: cargo check --all --all-targets

  clippy:
    description: Run clippy checks on all targets of a Rust crate.
    steps:
      - run:
          name: Calculate dependencies
          command: test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Run clippy checks
          command: |
            if rustup component add clippy; then
              cargo clippy --all --all-targets -- -Dwarnings -Drust-2018-idioms
            else
              echo Skipping clippy
            fi

  format:
    description: Check formatting of all sources of a Rust crate.
    steps:
      - run:
          name: Calculate dependencies
          command: test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Check formatting
          command: |
            if rustup component add rustfmt; then
              cargo fmt --all -- --check
            else
              echo Skipping rustfmt
            fi

  build:
    description: Build all targets of a Rust crate.
    parameters:
      release:
        description: By default, the crate is build in debug mode without optimizations. Set this to true to compile in release mode.
        type: boolean
        default: false
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - restore_cache:
          keys:
            - v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
      - run:
          name: Build all targets
          command: cargo build --all --all-targets<<#parameters.release>> --release<</parameters.release>>
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}

  test:
    description: Run all tests of a Rust crate. Make sure to build first.
    parameters:
      release:
        description: By default, the crate is build in debug mode without optimizations. Set this to true to compile in release mode.
        type: boolean
        default: false
    steps:
      - run:
          name: Run all tests
          command: cargo test --all<<#parameters.release>> --release<</parameters.release>>

jobs:
  check:
    description: Run compiler checks on a Rust crate.
    parameters:
      toolchain:
        description: Rust toolchain to use. Overrides the default toolchain (stable) or any toolchain specified in the project via `rust-toolchain`.
        type: string
        default: ""
    executor: default
    steps:
      - checkout_with_submodules
      - update_toolchain:
          toolchain: <<parameters.toolchain>>
      - check

  clippy:
    description: Run clippy checks on a Rust crate.
    parameters:
      toolchain:
        description: Rust toolchain to use. Overrides the default toolchain (stable) or any toolchain specified in the project via `rust-toolchain`.
        type: string
        default: ""
    executor: default
    steps:
      - checkout_with_submodules
      - update_toolchain:
          toolchain: <<parameters.toolchain>>
      - clippy

  format:
    description: Check formatting of a Rust crate.
    parameters:
      toolchain:
        description: Rust toolchain to use. Overrides the default toolchain (stable) or any toolchain specified in the project via `rust-toolchain`.
        type: string
        default: ""
    executor: default
    steps:
      - checkout_with_submodules
      - update_toolchain:
          toolchain: <<parameters.toolchain>>
      - format

  test:
    description: Builds a Rust crate and runs all tests.
    parameters:
      toolchain:
        description: Rust toolchain to use. Overrides the default toolchain (stable) or any toolchain specified in the project via `rust-toolchain`.
        type: string
        default: ""
      release:
        description: By default, the crate is build in debug mode without optimizations. Set this to true to compile in release mode.
        type: boolean
        default: false
    executor: default
    steps:
      - checkout_with_submodules
      - update_toolchain:
          toolchain: <<parameters.toolchain>>
      - build:
          release: <<parameters.release>>
      - test:
          release: <<parameters.release>>

workflows:
  version: 2
  build_and_test:
    jobs:
      - test